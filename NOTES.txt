DJANGO APP, PART 1:

    Definition:
    mysite is a project and polls is an app.

    To add a new app to the mysite project, we used the following technique:
    - python manage.py startapp polls
    - Adjust polls/views.py to include a response
    - Adjust polls/urls.py to add a url pattern.
    - Adjust mysite/urls.py to include the polls/urls.py

DJANGO APP, PART 2:

    - Adjust mysite/settings.py to specify what database we are using and the name of the database.
    - In mysite/settings.py adjust the timezone appropriately.
    - python manage.py migrate      # Run before setting up the tables.
    - next we add a models.py file into the polls app, which in essence defines the database structure.
    - In mysite/settings.py we add a reference to the PollsConfig class in polls/apps.py, by adding this
      into the INSTALLED_APPS:
        - 'polls.apps.PollsConfig'
    - You can then run the following to make any migrations:
        - python manage.py makemigrations polls
    - The polls/migrations directory now has a migration file that you can look at.   You can also look
      at the sql using the following:
        - python manage.py sqlmigrate polls 0001        #0001 is the migration file.
    - Run the following to check for any problems in your project before running migrations:
        - python manage.py check
    - To actually run the migration do the following:
        - python manage.py migrate
    - KEY - REMEMBER THE  GUIDE TO MAKING CHANGES TO OUR MODEL:
        - Change your models (in models.py).
        - Run python manage.py makemigrations to create migrations for those changes
        - To analyse the SQL: python manage.py sqlmigrate polls 0001
        - To check for problems in your project before migrating: python manage.py check
        - Run python manage.py migrate to apply those changes to the database.
    
    - Next we went into the python shell and added a new question into the system using the shell.   This
      seems important and useful to me.   You can analyse question characteristics, update the question
      and save any changes in the shell.   I suggest you look at this command and page:
        - python manage.py shell
        - https://docs.djangoproject.com/en/2.2/intro/tutorial02/
    - We then modified the models.py file to include a __str__ representation of the models.
      Adding __str__ is important as it is used extensively in django.
    - We then viewed these changes using python manage.py shell, again.
    - THIS BIT ON THE SHELL IS REALLY USEFUL AS IT SHOWS YOU HOW TO ADD A QUESTION, AND CHOICES
      TO THE DATABASE.
    
    - Note, at this point, I ran python manage.py makemigrations to ensure there were no migrations.
    
    - DJANGO Admin Site
      This is important as there is a built in admin site for the website administrators.
      - python manage.py createsuperuser
      - enter a username, email address and password, eg admin, admin@blah.com, ....
      - You can then start the server and goto the admin site using:
        - python manage.py runserver
        - http://127.0.0.1:8000/admin/.
      - KEY POINT - MAKE THE POLLS APP MODIFIABLE IN THE ADMIN:
        - adjust the polls/admin.py file.

DJANGO APP, PART 3:

    - We are going to add the following 4 views:
        - Question “index” page – displays the latest few questions.
        - Question “detail” page – displays a question text, with no results but with a form to vote.
        - Question “results” page – displays results for a particular question.
        - Vote action – handles voting for a particular choice in a particular question.
    
    - We add 3 extra views to the polls/views.py file.
    - We then wire these views into the polls app by adjusting polls/urls.py file.
    - Then try looking at the following pages:
      - /polls/34/
      - /polls/34/results/
      - /polls/34/vote/
    - Each view needs to do one of two things, either return HttpResponse or return Http404 error.
    - We then added a templates directory in the polls directory.   Then create another polls directory within
      the templates directory and a file called index.html
    - We then update the index view in polls/views.py to use this template when displaying the page.
    - The concept of a 404 error is introduced, ie the page doesn't exist.   Try comparing the following 2 links:
      - http://127.0.0.1:8000/polls/1/      # should be OK.
      - http://127.0.0.1:8000/polls/5/      # should show an error
    - IMPORTANT POINT ABOUT NAMESPACING URL'S IN THE polls/urls.py file and we adjust the polls/index.html
    file to use the namespace, ie use 'polls:detail' instead of 'detail'.
    - You can then test it on the standard links to ensure it is working:
      - http://127.0.0.1:8000/polls/1/          # should be OK.
      - http://127.0.0.1:8000/polls/5/          # should show an error
      - http://127.0.0.1:8000/polls/1/results/  # should be OK.
      - http://127.0.0.1:8000/polls/1/vote/     # should be OK.
      - http://127.0.0.1:8000/polls/5/vote/     # should be OK at the moment.

DJANGO APP, PART 4:

    - First we update the detail template to include a form.
    - We then change views.py to update the vote() view.
    - We update/change the views.py file with a new results view.
    - We create a results.html template.
    - At this point, we test the site and get the following:
        - http://127.0.0.1:8000/polls/              # All fine
        - http://127.0.0.1:8000/polls/1/            # All fine, nice questions
        - http://127.0.0.1:8000/polls/1/results/    # All fine with a link back that works.
        - http://127.0.0.1:8000/polls/1/vote/       # All fine, a voting form
        - http://127.0.0.1:8000/polls/5/            # An error, as expected (Qu 5 doesn't exist)

    - It mentions something called a race condition and how to avoid it using F.

    - I decided to save this part to github before moving onto the generic views section.

    - Generic Views:
      - We are going to change index, details and results so they use generic views.   In the 
        polls/urls.py file, we remove question_id and use pk instead (primary key, I assume.)
        We also use views.ResultsView.as_view() instead of views.Results
      - In views.py we replace the index, details and results def, with a class called IndexView,
        ResultsView and DetailView and I assume these are associated with the previously mentioned
        changes to the urls.py file.
      - We are using two generic views, ListView and DetailView.
      - KEY NOTE:   DetailView generic view uses a template called <app name>/<model name>_detail.html, and
        in our case this would be polls/question_detail.html.   The template_name attribute is used to tell 
        Django to use a specific template name instead of the autogenerated default template name
      - KEY NOTE: ListView generic view uses a template called <app name>/<model name>_list.html, but we use
        template name to tell it to use polls/index.html instead.   for ListView, the automatically generated 
        context variable is question_list. To override this we provide the context_object_name attribute, 
        specifying that we want to use latest_question_list instead
    - At this point, we test the site:
        - http://127.0.0.1:8000/polls/              # All fine
        - http://127.0.0.1:8000/polls/1/            # All fine, nice questions
        - http://127.0.0.1:8000/polls/1/results/    # All fine with a link back that works.
        - http://127.0.0.1:8000/polls/1/vote/       # All fine, a voting form
        - http://127.0.0.1:8000/polls/5/            # An error, as expected (Qu 5 doesn't exist)

DJANGO APP, PART 5:

    - This is about automated testing.
    - In the first part, we setup a class with 3 tests in the polls/tests.py file.   Originally there
      was a problem with the first test and was_published_recently in the models.py file needed to be
      changed, but once this was done, we could run the tests successfully with the following command:
      
      - python manage.py test polls

    - In the next part, we use the shell to explore the data and error codes returned by the web browser:
    
      - python manage.py shell

    - Currently the IndexView in polls/views.py returns polls in the future that are not published yet, 
      so we fix that by modifying get_queryset and importing timezone.   We then test this using:
        - http://127.0.0.1:8000/polls/              # All fine
        - http://127.0.0.1:8000/polls/1/            # All fine, nice questions
        - http://127.0.0.1:8000/polls/1/results/    # All fine with a link back that works.
        - http://127.0.0.1:8000/polls/1/vote/       # All fine, a voting form
        - http://127.0.0.1:8000/polls/2/            # This still displays when I put the date in the future.   Hmm !!

    - Suggestions for tests:
      - a separate TestClass for each model or view
      - a separate test method for each set of conditions you want to test
      - test method names that describe their function

DJANGO APP, PART 6:

    - In this tutorial we add a templates/polls/style.css file and directory structure.   The index.html
      file in the templates directory is adjusted to include the css file.   We then go to the following
      to test the new css format:
      - python manage.py runserver
      - http://localhost:8000/polls/      #The text should come out green.
    
    - We then add a background image and re-run.

DJANGO APP, PART 7:

    - In this tutorial it concentrates on customizing the Django's automatically generated admin site.
    - We add a new class to admin.py which changes the order so the date comes before the text.
    - It then uses fieldsets so that each field has a seperate title.
    - We already have the Question model in admin, we now add Choice model into admin.
    - We then tell it that Choice objects are edited on the Question admin page by adjusting admin.py
      To do this, we stop registering the choice question, but create a ChoiceInLine class that is 
      linked to the QuestionAdmin class.
    - It then changes the choices so that they are displayed in a tabular way.   We change 
      (admin.StackedInline)  to ...(admin.TabularInline)
    - We then change the display of QuestionAdmin to include was_published_recently
    - We then change the Question class in polls/models.py so that it can be sorted by was_published_recently
    - It adds a filter for pub date onto the side.

    - Next major bit is customizing the look of the Admin site.   We add a templates directory to the core 
      directory that contains the manage.py file.   We then adjust the DIRS option in the mysite/settings.py
      so that it knows where to look for templates.   We then copy a django core template from under the django
      directory structure into this directory and edit it so that id displays our site details instead.
    - To find the path to Django:
      - python -c "import django; print(django.__path__)"
      
ADVANCED TUTORIAL:

    - This part is about converting the polls app into a package that can be shared on PIP.
    - I DID NOT COMPLETE THIS.
    - However, what is interesting is how it highlighted some reusable packages that can be downloaded
      and reused:
      - https://djangopackages.org
    
    - There is an interesting bit about using an alternative documentation tool for converting text files 
      into html, called sphinx.
      - https://docs.djangoproject.com/en/2.2/intro/whatsnext/
